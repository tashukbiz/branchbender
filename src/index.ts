import { app, BrowserWindow, dialog, ipcMain } from 'electron';
import { GitHandles } from './ipcHandles';
import { exec } from 'child_process';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let mainWindow: BrowserWindow | null;

const createWindow = (): void => {
  const shouldOpenDevTools = true;

  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800 + (shouldOpenDevTools ? 400 : 0),
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  shouldOpenDevTools && mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', appReady);

function appReady() {
  ipcMain.handle(GitHandles.SelectRepositoryPath, selectRepositoryPath);
  ipcMain.handle(GitHandles.GetBranches, getGitBranches);
  createWindow();
}

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

async function getGitBranches(event, repositoryPath: string) {
  console.log('getGitBranches', event, repositoryPath);
  return new Promise((resolve, reject) => {
    exec('git branch', { cwd: repositoryPath }, (error, stdout, stderr) => {
      if (error) {
        reject(`Error: ${stderr}`);
        return;
      }
      const branches = stdout
        .split('\n')
        .map((branch) => branch.trim())
        .filter((branch) => branch.length > 0);
      resolve(branches);
    });
  });
}

async function selectRepositoryPath() {
  const result = await dialog.showOpenDialog(mainWindow!, {
    properties: ['openDirectory'],
  });

  if (!result.canceled && result.filePaths.length > 0) {
    return result.filePaths[0];
  }

  return null;
}
